{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"sample-a/","text":"test \u21a9 test2 \u21a9 testtt","title":"Sample Page A"},{"location":"sample-a/#test","text":"","title":"test"},{"location":"sample-a/#test2","text":"testtt","title":"test2"},{"location":"sample-a1/","text":"","title":"Sample Subpage A1"},{"location":"sample-a2/","text":"","title":"Sample Subpage A2"},{"location":"sample-b/","text":"","title":"Sample Page B"},{"location":"wireguard/configuration/","text":"Allow Forwarding \u21a9 edit /etc/sysctl.conf net.ipv4.ip_forward = 1 net.ipv6.conf.all.forwarding = 1 apply changes with sysctl -p Server Keys \u21a9 cd /etc/wireguard umask 0077 mkdir keys wg genkey > keys/server wg pubkey < keys/server > keys/server.pub Client Keys \u21a9 wg genkey > keys/desktop wg pubkey < keys/desktop > keys/desktop.pub wg genkey > keys/mobile wg pubkey < keys/mobile > keys/mobile.pub Generate ipv6 Address \u21a9 create a unique hash and take the last 5 bytes hash = $( printf $( date +%s%N )$( cat /var/lib/dbus/machine-id ) | sha256sum | cut -d ' ' -f1 ) hash =( $( echo ${ hash : -10 } | fold -w2 ) ) ipv6 = \"fd ${ hash [0] } : ${ hash [1] }${ hash [2] } : ${ hash [3] }${ hash [4] } \" example output of echo $ipv6 fdf8:b321:18d7 keep note of this for later Config on Server \u21a9 note eth0 is whatever your internet facing interface is echo \" [Interface] Address = 10.0.0.1/24 Address = IPV6_LOCAL SaveConfig = true PostUp = iptables -A FORWARD -i %i -j ACCEPT PostUp = ip6tables -A FORWARD -i %i -j ACCEPT PostUp = iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostUp = ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT PostDown = ip6tables -D FORWARD -i %i -j ACCEPT PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE PostDown = ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE ListenPort = 51820 PrivateKey = SERVERKEY ## Desktop [Peer] PublicKey = PUBKEY1 AllowedIPs = 10.0.0.101/32, IPV6_1 ## Mobile [Peer] PublicKey = PUBKEY2 AllowedIPs = 10.0.0.102/32, IPV6_2 \" > wg0.conf replace with values with the keys we generated earlier sed -i wg0.conf \\ -e \"s|SERVERKEY| $( cat keys/server ) |\" \\ -e \"s|PUBKEY1| $( cat keys/desktop.pub ) |\" \\ -e \"s|PUBKEY2| $( cat keys/mobile.pub ) |\" \\ -e \"s|IPV6_LOCAL| ${ ipv6 } ::1/64|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" Config for Clients \u21a9 these can be used to create a tunnel in the windows wireguard gui, or simply as reference to do it manually echo \" [Interface] PrivateKey = CLIENTKEY1 Address = 10.0.0.101/32 Address = IPV6_1 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > desktop.conf echo \" [Interface] Address = 10.0.0.102/32 Address = IPV6_2 PrivateKey = CLIENTKEY2 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > mobile.conf again, replace with values with the keys we generated earlier sed -i desktop.conf \\ -e \"s|CLIENTKEY1| $( cat keys/desktop ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" sed -i mobile.conf \\ -e \"s|CLIENTKEY1| $( cat keys/mobile ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" Create qrcode for android app \u21a9 qrencode -t ansiutf8 < mobile.conf qrencode -o qrcode.png < mobile.conf Start wireguard \u21a9 systemctl enable wg-quick@wg0.service systemctl start wg-quick@wg0.service wg show Notes \u21a9 You may notice you cant ping your peers from the server, this is from client side firewall (computer, not router) blocking inbound packets By default we just want a VPN, to forward ALL traffic and act as a proxy, in client config change: under interface: DNS = 10.0.0.1 under peer: AllowedIPs = 0.0.0.0/0, ::/0","title":"Configuration"},{"location":"wireguard/configuration/#allow-forwarding","text":"edit /etc/sysctl.conf net.ipv4.ip_forward = 1 net.ipv6.conf.all.forwarding = 1 apply changes with sysctl -p","title":"Allow Forwarding"},{"location":"wireguard/configuration/#server-keys","text":"cd /etc/wireguard umask 0077 mkdir keys wg genkey > keys/server wg pubkey < keys/server > keys/server.pub","title":"Server Keys"},{"location":"wireguard/configuration/#client-keys","text":"wg genkey > keys/desktop wg pubkey < keys/desktop > keys/desktop.pub wg genkey > keys/mobile wg pubkey < keys/mobile > keys/mobile.pub","title":"Client Keys"},{"location":"wireguard/configuration/#generate-ipv6-address","text":"create a unique hash and take the last 5 bytes hash = $( printf $( date +%s%N )$( cat /var/lib/dbus/machine-id ) | sha256sum | cut -d ' ' -f1 ) hash =( $( echo ${ hash : -10 } | fold -w2 ) ) ipv6 = \"fd ${ hash [0] } : ${ hash [1] }${ hash [2] } : ${ hash [3] }${ hash [4] } \" example output of echo $ipv6 fdf8:b321:18d7 keep note of this for later","title":"Generate ipv6 Address"},{"location":"wireguard/configuration/#config-on-server","text":"note eth0 is whatever your internet facing interface is echo \" [Interface] Address = 10.0.0.1/24 Address = IPV6_LOCAL SaveConfig = true PostUp = iptables -A FORWARD -i %i -j ACCEPT PostUp = ip6tables -A FORWARD -i %i -j ACCEPT PostUp = iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostUp = ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT PostDown = ip6tables -D FORWARD -i %i -j ACCEPT PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE PostDown = ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE ListenPort = 51820 PrivateKey = SERVERKEY ## Desktop [Peer] PublicKey = PUBKEY1 AllowedIPs = 10.0.0.101/32, IPV6_1 ## Mobile [Peer] PublicKey = PUBKEY2 AllowedIPs = 10.0.0.102/32, IPV6_2 \" > wg0.conf replace with values with the keys we generated earlier sed -i wg0.conf \\ -e \"s|SERVERKEY| $( cat keys/server ) |\" \\ -e \"s|PUBKEY1| $( cat keys/desktop.pub ) |\" \\ -e \"s|PUBKEY2| $( cat keys/mobile.pub ) |\" \\ -e \"s|IPV6_LOCAL| ${ ipv6 } ::1/64|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\"","title":"Config on Server"},{"location":"wireguard/configuration/#config-for-clients","text":"these can be used to create a tunnel in the windows wireguard gui, or simply as reference to do it manually echo \" [Interface] PrivateKey = CLIENTKEY1 Address = 10.0.0.101/32 Address = IPV6_1 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > desktop.conf echo \" [Interface] Address = 10.0.0.102/32 Address = IPV6_2 PrivateKey = CLIENTKEY2 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > mobile.conf again, replace with values with the keys we generated earlier sed -i desktop.conf \\ -e \"s|CLIENTKEY1| $( cat keys/desktop ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" sed -i mobile.conf \\ -e \"s|CLIENTKEY1| $( cat keys/mobile ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\"","title":"Config for Clients"},{"location":"wireguard/configuration/#create-qrcode-for-android-app","text":"qrencode -t ansiutf8 < mobile.conf qrencode -o qrcode.png < mobile.conf","title":"Create qrcode for android app"},{"location":"wireguard/configuration/#start-wireguard","text":"systemctl enable wg-quick@wg0.service systemctl start wg-quick@wg0.service wg show","title":"Start wireguard"},{"location":"wireguard/configuration/#notes","text":"You may notice you cant ping your peers from the server, this is from client side firewall (computer, not router) blocking inbound packets By default we just want a VPN, to forward ALL traffic and act as a proxy, in client config change: under interface: DNS = 10.0.0.1 under peer: AllowedIPs = 0.0.0.0/0, ::/0","title":"Notes"},{"location":"wireguard/installation/","text":"Distro Package Ubuntu apt install wireguard ArchLinux pacman -S wireguard-tools Fedora dnf install wireguard-tools Windows https://download.wireguard.com/windows-client Android https://f-droid.org/en/packages/com.wireguard.android iOS https://apps.apple.com/us/app/wireguard/id1441195209","title":"Installation"},{"location":"wireguard/mikrotik/","text":"Installation \u21a9 Distro Package Ubuntu apt install wireguard ArchLinux pacman -S wireguard-tools Fedora dnf install wireguard-tools Windows https://download.wireguard.com/windows-client Android https://f-droid.org/en/packages/com.wireguard.android iOS https://apps.apple.com/us/app/wireguard/id1441195209 Allow Forwarding \u21a9 edit /etc/sysctl.conf net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1 apply changes with sysctl -p Server Keys \u21a9 cd /etc/wireguard umask 0077 mkdir keys wg genkey > keys/server wg pubkey < keys/server > keys/server.pub Client Keys \u21a9 wg genkey > keys/desktop wg pubkey < keys/desktop > keys/desktop.pub wg genkey > keys/mobile wg pubkey < keys/mobile > keys/mobile.pub Generate ipv6 Address \u21a9 create a unique hash and take the last 5 bytes hash = $( printf $( date +%s%N )$( cat /var/lib/dbus/machine-id ) | sha256sum | cut -d ' ' -f1 ) hash =( $( echo ${ hash : -10 } | fold -w2 ) ) ipv6 = \"fd ${ hash [0] } : ${ hash [1] }${ hash [2] } : ${ hash [3] }${ hash [4] } \" example output of echo $ipv6 fdf8:b321:18d7 keep note of this for later Config on Server \u21a9 note eth0 is whatever your internet facing interface is echo \" [Interface] Address = 10.0.0.1/24 Address = IPV6_LOCAL SaveConfig = true PostUp = iptables -A FORWARD -i %i -j ACCEPT PostUp = ip6tables -A FORWARD -i %i -j ACCEPT PostUp = iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostUp = ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT PostDown = ip6tables -D FORWARD -i %i -j ACCEPT PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE PostDown = ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE ListenPort = 51820 PrivateKey = SERVERKEY ## Desktop [Peer] PublicKey = PUBKEY1 AllowedIPs = 10.0.0.101/32, IPV6_1 ## Mobile [Peer] PublicKey = PUBKEY2 AllowedIPs = 10.0.0.102/32, IPV6_2 \" > wg0.conf replace with values with the keys we generated earlier sed -i wg0.conf \\ -e \"s|SERVERKEY| $( cat keys/server ) |\" \\ -e \"s|PUBKEY1| $( cat keys/desktop.pub ) |\" \\ -e \"s|PUBKEY2| $( cat keys/mobile.pub ) |\" \\ -e \"s|IPV6_LOCAL| ${ ipv6 } ::1/64|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" Config for Clients \u21a9 these can be used to create a tunnel in the windows wireguard gui, or simply as reference to do it manually echo \" [Interface] PrivateKey = CLIENTKEY1 Address = 10.0.0.101/32 Address = IPV6_1 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > desktop.conf echo \" [Interface] Address = 10.0.0.102/32 Address = IPV6_2 PrivateKey = CLIENTKEY2 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > mobile.conf again, replace with values with the keys we generated earlier sed -i desktop.conf \\ -e \"s|CLIENTKEY1| $( cat keys/desktop ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" sed -i mobile.conf \\ -e \"s|CLIENTKEY1| $( cat keys/mobile ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" Create qrcode for android app \u21a9 qrencode -t ansiutf8 < mobile.conf qrencode -o qrcode.png < mobile.conf Start wireguard \u21a9 systemctl enable wg-quick@wg0.service systemctl start wg-quick@wg0.service wg show SMB \u21a9 edit /etc/samba/smb.conf server string = Wireguard Share interfaces = 10.0.0.1 / 32 [public] comment = Public Share path = / share read only = no guest ok = yes mkdir /share chmod 777 /share systemctl enable smbd systemctl start smbd Notes \u21a9 You may notice you cant ping your peers from the server, this is from client side firewall (computer, not router) blocking inbound packets By default we just want a VPN, to forward ALL traffic and act as a proxy, in client config change: under interface: DNS = 10.0.0.1 under peer: AllowedIPs = 0.0.0.0/0, ::/0","title":"Mikrotik"},{"location":"wireguard/mikrotik/#installation","text":"Distro Package Ubuntu apt install wireguard ArchLinux pacman -S wireguard-tools Fedora dnf install wireguard-tools Windows https://download.wireguard.com/windows-client Android https://f-droid.org/en/packages/com.wireguard.android iOS https://apps.apple.com/us/app/wireguard/id1441195209","title":"Installation"},{"location":"wireguard/mikrotik/#allow-forwarding","text":"edit /etc/sysctl.conf net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1 apply changes with sysctl -p","title":"Allow Forwarding"},{"location":"wireguard/mikrotik/#server-keys","text":"cd /etc/wireguard umask 0077 mkdir keys wg genkey > keys/server wg pubkey < keys/server > keys/server.pub","title":"Server Keys"},{"location":"wireguard/mikrotik/#client-keys","text":"wg genkey > keys/desktop wg pubkey < keys/desktop > keys/desktop.pub wg genkey > keys/mobile wg pubkey < keys/mobile > keys/mobile.pub","title":"Client Keys"},{"location":"wireguard/mikrotik/#generate-ipv6-address","text":"create a unique hash and take the last 5 bytes hash = $( printf $( date +%s%N )$( cat /var/lib/dbus/machine-id ) | sha256sum | cut -d ' ' -f1 ) hash =( $( echo ${ hash : -10 } | fold -w2 ) ) ipv6 = \"fd ${ hash [0] } : ${ hash [1] }${ hash [2] } : ${ hash [3] }${ hash [4] } \" example output of echo $ipv6 fdf8:b321:18d7 keep note of this for later","title":"Generate ipv6 Address"},{"location":"wireguard/mikrotik/#config-on-server","text":"note eth0 is whatever your internet facing interface is echo \" [Interface] Address = 10.0.0.1/24 Address = IPV6_LOCAL SaveConfig = true PostUp = iptables -A FORWARD -i %i -j ACCEPT PostUp = ip6tables -A FORWARD -i %i -j ACCEPT PostUp = iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostUp = ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT PostDown = ip6tables -D FORWARD -i %i -j ACCEPT PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE PostDown = ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE ListenPort = 51820 PrivateKey = SERVERKEY ## Desktop [Peer] PublicKey = PUBKEY1 AllowedIPs = 10.0.0.101/32, IPV6_1 ## Mobile [Peer] PublicKey = PUBKEY2 AllowedIPs = 10.0.0.102/32, IPV6_2 \" > wg0.conf replace with values with the keys we generated earlier sed -i wg0.conf \\ -e \"s|SERVERKEY| $( cat keys/server ) |\" \\ -e \"s|PUBKEY1| $( cat keys/desktop.pub ) |\" \\ -e \"s|PUBKEY2| $( cat keys/mobile.pub ) |\" \\ -e \"s|IPV6_LOCAL| ${ ipv6 } ::1/64|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\"","title":"Config on Server"},{"location":"wireguard/mikrotik/#config-for-clients","text":"these can be used to create a tunnel in the windows wireguard gui, or simply as reference to do it manually echo \" [Interface] PrivateKey = CLIENTKEY1 Address = 10.0.0.101/32 Address = IPV6_1 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > desktop.conf echo \" [Interface] Address = 10.0.0.102/32 Address = IPV6_2 PrivateKey = CLIENTKEY2 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > mobile.conf again, replace with values with the keys we generated earlier sed -i desktop.conf \\ -e \"s|CLIENTKEY1| $( cat keys/desktop ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" sed -i mobile.conf \\ -e \"s|CLIENTKEY1| $( cat keys/mobile ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\"","title":"Config for Clients"},{"location":"wireguard/mikrotik/#create-qrcode-for-android-app","text":"qrencode -t ansiutf8 < mobile.conf qrencode -o qrcode.png < mobile.conf","title":"Create qrcode for android app"},{"location":"wireguard/mikrotik/#start-wireguard","text":"systemctl enable wg-quick@wg0.service systemctl start wg-quick@wg0.service wg show","title":"Start wireguard"},{"location":"wireguard/mikrotik/#smb","text":"edit /etc/samba/smb.conf server string = Wireguard Share interfaces = 10.0.0.1 / 32 [public] comment = Public Share path = / share read only = no guest ok = yes mkdir /share chmod 777 /share systemctl enable smbd systemctl start smbd","title":"SMB"},{"location":"wireguard/mikrotik/#notes","text":"You may notice you cant ping your peers from the server, this is from client side firewall (computer, not router) blocking inbound packets By default we just want a VPN, to forward ALL traffic and act as a proxy, in client config change: under interface: DNS = 10.0.0.1 under peer: AllowedIPs = 0.0.0.0/0, ::/0","title":"Notes"},{"location":"wireguard/samba/","text":"edit /etc/samba/smb.conf server string = Wireguard Share interfaces = 10.0.0.1 / 32 [public] comment = Public Share path = / share read only = no guest ok = yes mkdir /share chmod 777 /share systemctl enable smbd systemctl start smbd","title":"Samba"}]}