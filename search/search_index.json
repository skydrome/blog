{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"wireguard/configuration/","text":"Allow Forwarding \u21a9 /etc/sysctl.conf net.ipv4.ip_forward = 1 net.ipv6.conf.all.forwarding = 1 apply changes with sysctl -p Server Keys \u21a9 cd /etc/wireguard umask 0077 mkdir keys wg genkey > keys/server wg pubkey < keys/server > keys/server.pub Peer Keys \u21a9 wg genkey > keys/desktop wg pubkey < keys/desktop > keys/desktop.pub wg genkey > keys/mobile wg pubkey < keys/mobile > keys/mobile.pub Generate ipv6 Address \u21a9 create a unique hash and take the last 5 bytes hash = $( printf $( date +%s%N )$( cat /var/lib/dbus/machine-id ) | sha256sum | cut -d ' ' -f1 ) hash =( $( echo ${ hash : -10 } | fold -w2 ) ) ipv6 = \"fd ${ hash [0] } : ${ hash [1] }${ hash [2] } : ${ hash [3] }${ hash [4] } \" example output of echo $ipv6 fdf8:b321:18d7 keep note of this for later Config on Server \u21a9 optional: see nftables example if you want to use a static ruleset, then remove the postup/down lines (also notes #3) note: eno3 is whatever your internet facing interface is echo \" [Interface] Address = 10.0.0.1/24 Address = IPV6_LOCAL SaveConfig = true PostUp = iptables -A FORWARD -i %i -j ACCEPT PostUp = ip6tables -A FORWARD -i %i -j ACCEPT PostUp = iptables -t nat -I POSTROUTING -o eno3 -j MASQUERADE PostUp = ip6tables -t nat -I POSTROUTING -o eno3 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT PostDown = ip6tables -D FORWARD -i %i -j ACCEPT PostDown = iptables -t nat -D POSTROUTING -o eno3 -j MASQUERADE PostDown = ip6tables -t nat -D POSTROUTING -o eno3 -j MASQUERADE ListenPort = 51820 PrivateKey = SERVERKEY ## Desktop [Peer] PublicKey = PUBKEY1 AllowedIPs = 10.0.0.101/32, IPV6_1 ## Mobile [Peer] PublicKey = PUBKEY2 AllowedIPs = 10.0.0.102/32, IPV6_2 \" > wg0.conf replace with values with the keys we generated earlier sed -i wg0.conf \\ -e \"s|SERVERKEY| $( cat keys/server ) |\" \\ -e \"s|PUBKEY1| $( cat keys/desktop.pub ) |\" \\ -e \"s|PUBKEY2| $( cat keys/mobile.pub ) |\" \\ -e \"s|IPV6_LOCAL| ${ ipv6 } ::1/64|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" Config for Peers \u21a9 these can be used to create a tunnel in the windows wireguard gui, or simply as reference to do it manually echo \" [Interface] PrivateKey = CLIENTKEY1 Address = 10.0.0.101/32 Address = IPV6_1 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > desktop.conf echo \" [Interface] Address = 10.0.0.102/32 Address = IPV6_2 PrivateKey = CLIENTKEY2 [Peer] PublicKey = SERVERKEY AllowedIPs = 0.0.0.0/24, IPV6 Endpoint = IP:51820 \" > mobile.conf again, replace with values with the keys we generated earlier sed -i desktop.conf \\ -e \"s|CLIENTKEY1| $( cat keys/desktop ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" sed -i mobile.conf \\ -e \"s|CLIENTKEY1| $( cat keys/mobile ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" Create qrcode for android app \u21a9 qrencode -t ansiutf8 < mobile.conf qrencode -o qrcode.png < mobile.conf Start wireguard \u21a9 systemctl enable wg-quick@wg0.service systemctl start wg-quick@wg0.service wg show Notes \u21a9 You may notice you cant ping your peers from the server, this is from client side firewall (computer, not router) blocking inbound packets By default we just want a VPN, to forward ALL traffic and act as a proxy, in peer config change: under peer: AllowedIPs = 0.0.0.0/0, ::/0 Even tho you have iptables available, depending on how recent your distro is it likely uses nftables and translates commands to the new format","title":"Configuration"},{"location":"wireguard/configuration/#allow-forwarding","text":"/etc/sysctl.conf net.ipv4.ip_forward = 1 net.ipv6.conf.all.forwarding = 1 apply changes with sysctl -p","title":"Allow Forwarding"},{"location":"wireguard/configuration/#server-keys","text":"cd /etc/wireguard umask 0077 mkdir keys wg genkey > keys/server wg pubkey < keys/server > keys/server.pub","title":"Server Keys"},{"location":"wireguard/configuration/#peer-keys","text":"wg genkey > keys/desktop wg pubkey < keys/desktop > keys/desktop.pub wg genkey > keys/mobile wg pubkey < keys/mobile > keys/mobile.pub","title":"Peer Keys"},{"location":"wireguard/configuration/#generate-ipv6-address","text":"create a unique hash and take the last 5 bytes hash = $( printf $( date +%s%N )$( cat /var/lib/dbus/machine-id ) | sha256sum | cut -d ' ' -f1 ) hash =( $( echo ${ hash : -10 } | fold -w2 ) ) ipv6 = \"fd ${ hash [0] } : ${ hash [1] }${ hash [2] } : ${ hash [3] }${ hash [4] } \" example output of echo $ipv6 fdf8:b321:18d7 keep note of this for later","title":"Generate ipv6 Address"},{"location":"wireguard/configuration/#config-on-server","text":"optional: see nftables example if you want to use a static ruleset, then remove the postup/down lines (also notes #3) note: eno3 is whatever your internet facing interface is echo \" [Interface] Address = 10.0.0.1/24 Address = IPV6_LOCAL SaveConfig = true PostUp = iptables -A FORWARD -i %i -j ACCEPT PostUp = ip6tables -A FORWARD -i %i -j ACCEPT PostUp = iptables -t nat -I POSTROUTING -o eno3 -j MASQUERADE PostUp = ip6tables -t nat -I POSTROUTING -o eno3 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT PostDown = ip6tables -D FORWARD -i %i -j ACCEPT PostDown = iptables -t nat -D POSTROUTING -o eno3 -j MASQUERADE PostDown = ip6tables -t nat -D POSTROUTING -o eno3 -j MASQUERADE ListenPort = 51820 PrivateKey = SERVERKEY ## Desktop [Peer] PublicKey = PUBKEY1 AllowedIPs = 10.0.0.101/32, IPV6_1 ## Mobile [Peer] PublicKey = PUBKEY2 AllowedIPs = 10.0.0.102/32, IPV6_2 \" > wg0.conf replace with values with the keys we generated earlier sed -i wg0.conf \\ -e \"s|SERVERKEY| $( cat keys/server ) |\" \\ -e \"s|PUBKEY1| $( cat keys/desktop.pub ) |\" \\ -e \"s|PUBKEY2| $( cat keys/mobile.pub ) |\" \\ -e \"s|IPV6_LOCAL| ${ ipv6 } ::1/64|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\"","title":"Config on Server"},{"location":"wireguard/configuration/#config-for-peers","text":"these can be used to create a tunnel in the windows wireguard gui, or simply as reference to do it manually echo \" [Interface] PrivateKey = CLIENTKEY1 Address = 10.0.0.101/32 Address = IPV6_1 [Peer] PublicKey = SERVERKEY AllowedIPs = 10.0.0.0/24, IPV6 Endpoint = IP:51820 \" > desktop.conf echo \" [Interface] Address = 10.0.0.102/32 Address = IPV6_2 PrivateKey = CLIENTKEY2 [Peer] PublicKey = SERVERKEY AllowedIPs = 0.0.0.0/24, IPV6 Endpoint = IP:51820 \" > mobile.conf again, replace with values with the keys we generated earlier sed -i desktop.conf \\ -e \"s|CLIENTKEY1| $( cat keys/desktop ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_1| ${ ipv6 } ::101/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\" sed -i mobile.conf \\ -e \"s|CLIENTKEY1| $( cat keys/mobile ) |\" \\ -e \"s|SERVERKEY| $( cat keys/server.pub ) |\" \\ -e \"s|IPV6| ${ ipv6 } ::|\" \\ -e \"s|IPV6_2| ${ ipv6 } ::102/128|\" \\ -e \"s|IP| $( hostname -I | awk '{print $1}' ) |\"","title":"Config for Peers"},{"location":"wireguard/configuration/#create-qrcode-for-android-app","text":"qrencode -t ansiutf8 < mobile.conf qrencode -o qrcode.png < mobile.conf","title":"Create qrcode for android app"},{"location":"wireguard/configuration/#start-wireguard","text":"systemctl enable wg-quick@wg0.service systemctl start wg-quick@wg0.service wg show","title":"Start wireguard"},{"location":"wireguard/configuration/#notes","text":"You may notice you cant ping your peers from the server, this is from client side firewall (computer, not router) blocking inbound packets By default we just want a VPN, to forward ALL traffic and act as a proxy, in peer config change: under peer: AllowedIPs = 0.0.0.0/0, ::/0 Even tho you have iptables available, depending on how recent your distro is it likely uses nftables and translates commands to the new format","title":"Notes"},{"location":"wireguard/installation/","text":"Distro Package Ubuntu apt install wireguard ArchLinux pacman -S wireguard-tools Fedora dnf install wireguard-tools Windows https://download.wireguard.com/windows-client Android https://f-droid.org/en/packages/com.wireguard.android iOS https://apps.apple.com/us/app/wireguard/id1441195209","title":"Installation"},{"location":"wireguard/mikrotik/","text":"Wireguard is available in routerOS v7 Create Interface \u21a9 /interface/wireguard add listen-port=51820 name=wireguard1 Keys will be created automatically, make note of the public key, you'll be adding that to your phone's tunnel /ip/address add address=10.0.0.1/24 network=10.0.0.0 interface=wireguard1 /ip/route add dst-address=10.0.0.0/24 gateway=wireguard1 Firewall \u21a9 /ip/firewall/filter add action=accept chain=input dst-port=51820 protocol=udp in-interface-list=WAN /ip/firewall/nat add action=masquerade chain=srcnat src-address=10.0.0.0/24 Add Peers \u21a9 In this case our one peer will be our mobile phone /interface/wireguard/peers add interface=wireguard1 allowed-address=10.0.0.102/32 comment=\"Phone\" \\ public-key=\"\" public-key you can use what you generated on the server earlier keys/mobile.pub or using the wireguard app when creating a new tunnel Mobile App \u21a9 [Interface] PrivateKey = this will be created automatically Address = 10.0.0.102/32 [Peer] PublicKey = public key of router you saved earlier AllowedIPs = 0.0.0.0/0 Endpoint = your routers external ip:51820","title":"Mikrotik"},{"location":"wireguard/mikrotik/#create-interface","text":"/interface/wireguard add listen-port=51820 name=wireguard1 Keys will be created automatically, make note of the public key, you'll be adding that to your phone's tunnel /ip/address add address=10.0.0.1/24 network=10.0.0.0 interface=wireguard1 /ip/route add dst-address=10.0.0.0/24 gateway=wireguard1","title":"Create Interface"},{"location":"wireguard/mikrotik/#firewall","text":"/ip/firewall/filter add action=accept chain=input dst-port=51820 protocol=udp in-interface-list=WAN /ip/firewall/nat add action=masquerade chain=srcnat src-address=10.0.0.0/24","title":"Firewall"},{"location":"wireguard/mikrotik/#add-peers","text":"In this case our one peer will be our mobile phone /interface/wireguard/peers add interface=wireguard1 allowed-address=10.0.0.102/32 comment=\"Phone\" \\ public-key=\"\" public-key you can use what you generated on the server earlier keys/mobile.pub or using the wireguard app when creating a new tunnel","title":"Add Peers"},{"location":"wireguard/mikrotik/#mobile-app","text":"[Interface] PrivateKey = this will be created automatically Address = 10.0.0.102/32 [Peer] PublicKey = public key of router you saved earlier AllowedIPs = 0.0.0.0/0 Endpoint = your routers external ip:51820","title":"Mobile App"},{"location":"wireguard/nftables/","text":"/etc/nftables.conf #!/usr/sbin/nft -f # Hook order: ingress -> prerouting -> input/output/forward -> postrouting # Start by flushing all the rules flush ruleset # Define variables define wan = eno3 define vpn = wg0 define vpn_net = 10.0.0.0/24 # This table will handle both ipv4 and ipv6 table inet filter { # Sets are dictionaries and maps of ports, addresses etc # TCP ports to allow, here we add ssh, http and https set tcp_accepted { # The \"inet_service\" are for tcp/udp ports and \"flags interval\" allows to set intervals type inet_service; flags interval; elements = { 22,80,443 } } # UDP ports to allow, here we add ports for WireGuard set udp_accepted { type inet_service; flags interval; elements = { 51820 } } # The first chain, can be named anything you like chain input { # This line set what traffic the chain will handle, the priority and default policy # The priority comes in when you in another table have a chain set to \"hook input\" and want to specify in what order they should run type filter hook input priority 0; policy drop; # Limit ping requests ip protocol icmp icmp type echo-request limit rate over 1/second burst 5 packets drop ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate over 1/second burst 5 packets drop # Rules with \"limit\" need to be put before rules accepting \"established\" connections # Allow all incmming established and related traffic ct state established,related accept # Allow loopback # Interfaces can by set with \"iif\" or \"iifname\" (oif/oifname). If the interface can come and go use \"iifname\", otherwise use \"iif\" since it performs better iif lo accept # Allow certain inbound ICMP types (ping, traceroute) # With these allowed you are a good network citizen ip protocol icmp icmp type { destination-unreachable, echo-reply, echo-request, source-quench, time-exceeded } accept # Without the nd-* ones ipv6 will not work ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, echo-reply, echo-request, nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert, packet-too-big, parameter-problem, time-exceeded } accept # Allow needed tcp and udp ports iif $wan tcp dport @tcp_accepted ct state new accept iif $wan udp dport @udp_accepted ct state new accept # Allow WireGuard clients to access DNS and services iifname $vpn udp dport 53 ct state new accept iifname $vpn tcp dport @tcp_accepted ct state new accept iifname $vpn udp dport @udp_accepted ct state new accept # SMB iifname $vpn tcp dport 445 ct state new accept iifname $vpn udp dport 445 ct state new accept # Allow VPN clients to communicate with each other # iifname $vpn oifname $vpn ct state new accept # reject with polite \"port unreachable\" icmp response reject } chain forward { type filter hook forward priority 0; policy drop; # Forward all established and related traffic ct state established,related accept # Forward WireGuard traffic # Allow WireGuard traffic to access the internet via wan iifname $vpn oifname $wan ct state new accept reject with icmpx type host-unreachable } chain output { type filter hook output priority 0; policy drop; # Allow all other outgoing traffic ip6 nexthdr ipv6-icmp accept ct state new,established,related accept } } # Separate table for hook pre- and postrouting table inet router { # Masquerade WireGuard traffic # All WireGuard traffic will look like it comes from the servers IP address oifname $wan ip saddr $vpn_net masquerade } } # Separate table for hook ingress to filter bad packets early table netdev filter { chain ingress { type filter hook ingress device \"eno3\" priority -500; # Drop all fragments ip frag-off & 0x1fff != 0 drop # Drop XMAS packets tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg drop # Drop NULL packets tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 drop # Drop uncommon MSS values tcp flags syn tcp option maxseg size 1-535 drop } } table inet drop-bad-ct-states { chain prerouting { type filter hook prerouting priority -150; policy accept; # drop packets in \"invalid\" connection-tracking state ct state invalid drop # drop tcp packets for new connections that aren't syn packets ct state new tcp flags & (fin|syn|rst|ack) != syn drop # drop new connections over rate limit ct state new limit rate over 1/second burst 10 packets drop } } systemctl enable nftables systemctl restart nftables","title":"nftables"},{"location":"wireguard/samba/","text":"/etc/samba/smb.conf server string = Wireguard Share interfaces = 10.0.0.1 / 32 [public] comment = Public Share path = / share read only = no guest ok = yes mkdir /share chmod 777 /share systemctl enable smbd systemctl start smbd","title":"Samba"}]}